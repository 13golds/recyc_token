// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract RECYC is ERC20, Ownable {
    // Total supply: 1 trillion (1,000,000,000,000 tokens)
    uint256 public constant MAX_SUPPLY = 1000000000000 * (10 ** 18); // 1 trillion tokens with 18 decimals
    uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** 18); // 5% of 1 trillion = 50 billion tokens

    // Contract address (where token will be deployed)
    address public constant CONTRACT_ADDRESS = 0x4E119d367e97B4E7362900838f74f5364Cd96e78;

    constructor() ERC20("RECYC Token", "RECYC") {
        // Initially mint 50 billion tokens
        _mint(msg.sender, INITIAL_SUPPLY); // Initial 5% token issuance
    }

    // Function to mint additional tokens without exceeding the max supply
    function mint(address to, uint256 amount) public onlyOwner {
        require(totalSupply() + amount <= MAX_SUPPLY, "Cannot exceed maximum supply");
        _mint(to, amount);
    }

    // Function to lock tokens in the contract (for future issuance, for example)
    function lockTokens(address to, uint256 amount) public onlyOwner {
        require(amount <= balanceOf(msg.sender), "Insufficient balance to lock");
        _transfer(msg.sender, to, amount);
    }

    // Function to transfer contract ownership back to its address if needed
    function transferContractOwnership() public onlyOwner {
        transferOwnership(CONTRACT_ADDRESS);
    }

    // Additional function to check the total supply of tokens
    function getTotalSupply() public view returns (uint256) {
        return totalSupply();
    }

    // Function to burn tokens (reduce the supply)
    function burn(uint256 amount) public onlyOwner {
        _burn(msg.sender, amount);
    }
}
